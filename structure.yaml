.:
  .DS_Store: {}
  .gitignore: {}
  config.ini: {预处理的配置文件}
  config.yaml: {run.py的配置文件,可以根据需求修改或添加新的配置文件}
  structure.yaml: {项目结构文件}
  run.py: {MLmodel的运行main文件}
DLmodel-torch:
  checkpoints:
    CNN:
      checkpoint_best.pth.tar: {CNN的checkpoints文件}
    MLP:
      checkpoint_best.pth.tar: {MLP的checkpoints文件}
    ResNet:
      checkpoint_best.pth.tar: {ResNet的checkpoints文件}
  dataset.py: {数据集类文件}
  log:
    CNN-log.txt: {CNN的训练记录文件}
    MLP-log.txt: {MLP的训练记录文件}
    ResNet-log.txt: {ResNet的训练记录文件}
  model_dict.py: {DLmodel的模型字典}
  models:
    Layers.py: {网络层的定义文件}
    MLP.py: {MLP网络架构}
    ResNet.py: {ResNet网络架构}
    __init__.py: {}
    cnn.py: {CNN网络架构}
  sh_scripts:
    clean.sh: {用清空log和checkpoints文件夹的脚本}
    train.sh: {训练用脚本}
  train.py: {训练main函数}
  utils.py: {一些工具函数}
MLmodel:
  DistanceBased:
    DistanceBasedModel.py: {基于distance的模型的基类}
    KNN.py: {KNN模型}
    Logistic.py: {Logistic模型}
    __init__.py: {}
  FeatureBased:
    FeatureBasedModel.py: {基于feature的模型的基类}
    KNN.py: {KNN模型}
    SVM.py: {SVM模型}
    __init__.py: {}
  InstanceBased:
    InstanceBasedModel.py: {基于instance的模型的基类}
    KNN.py: {KNN模型}
    __init__.py: {}
  __init__.py: {}
  baseModel.py: {ML模型基类}
  distance_measure.py: {距离衡量方式}
  model_dict.py: {MLmodel的模型字典}
data:
  logs:
    old-log.txt: {}
  old:
    data.csv: {}
    train.csv: {}
    valid.csv: {}
  pic:
    Feature-KNN-AvgEuclidean:
      Feature-KNN-AvgEuclidean.png: {}
      Feature-KNN-AvgEuclideanConfusion_Matrix.png: {}
    Feature-KNN-DTW:
      Feature-KNN-DTW.png: {}
      Feature-KNN-DTWConfusion_Matrix.png: {}
    Feature-KNN-Euclidean:
      Feature-KNN-Euclidean.png: {}
      Feature-KNN-EuclideanConfusion_Matrix.png: {}
    Feature-KNN-Manhattan:
      Feature-KNN-Manhattan.png: {}
      Feature-KNN-ManhattanConfusion_Matrix.png: {}
    Feature-Logistic-AvgEuclidean:
      Feature-Logistic-AvgEuclidean.png: {}
      Feature-Logistic-AvgEuclideanConfusion_Matrix.png: {}
    Feature-Logistic-DTW:
      Feature-Logistic-DTW.png: {}
      Feature-Logistic-DTWConfusion_Matrix.png: {}
    Feature-Logistic-Euclidean:
      Feature-Logistic-Euclidean.png: {}
      Feature-Logistic-EuclideanConfusion_Matrix.png: {}
    Feature-Logistic-Manhattan:
      Feature-Logistic-Manhattan.png: {}
      Feature-Logistic-ManhattanConfusion_Matrix.png: {}
    Instance-KNN-AvgEuclidean:
      Instance-KNN-AvgEuclidean.png: {}
      Instance-KNN-AvgEuclideanConfusion_Matrix.png: {}
    Instance-KNN-DTW:
      Instance-KNN-DTW.png: {}
      Instance-KNN-DTWConfusion_Matrix.png: {}
    Instance-KNN-Euclidean:
      Instance-KNN-Euclidean.png: {}
      Instance-KNN-EuclideanConfusion_Matrix.png: {}
    Instance-KNN-Manhattan:
      Instance-KNN-Manhattan.png: {}
      Instance-KNN-ManhattanConfusion_Matrix.png: {}
doc:
  img.png: {}
  img_1.png: {}
  img_2.png: {}
  img_3.png: {}
  readme.md: {}
  "\u57FA\u4E8E\u673A\u5668\u5B66\u4E60\u7684\u5F00\u6E90\u9879\u76EE\u751F\u5B58\u72B6\u6001\u9884\u6D4B\u6280\u672F\u7814\u7A76\u548C\u57FA\u51C6\u6570\u636E\u96C6\u6784\u5EFA.docx": {}
generateData:
  data_preprocess.py: {数据预处理}
  marking.py: {打标}
generateStructure:
  delete.py: {删除项目文件夹中的所有__pycache__文件夹}
  getStructure.py: {将文件夹的目录结构保存为YAML格式文件}
sh_scripts:
  cleanResult.sh: {删除oss-compass-result文件夹的数据}
  generateData.sh: {进行数据预处理和打标的脚本}
  getStructure.sh: {生成项目结构yaml文件}
utils:
  evaluation.py: {模型性能衡量函数}
  feature_extraction.py: {特征提取函数}
  feature_selection.py: {特征筛选函数}
  read.py: {数据读取函数}
